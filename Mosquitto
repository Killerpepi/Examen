#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <MQTTClient.h>
#include <unistd.h> // For sleep function

#define ADDRESS     "tcp://192.168.0.104:1883"                    // !! IP-address:Port-ID
#define CLIENTID    "PClient"                                     // Unique client ID
#define SUB_TOPIC   "P1/DM8"                                       // MQTT topic
#define QOS         1                                             // Quality of Service level
#define TIMEOUT     10000L                                        // Timeout in milliseconds
#define DEBUG       1

volatile MQTTClient_deliveryToken deliveredtoken;

void delivered(void *context, MQTTClient_deliveryToken dt) {
    #ifdef DEBUG
        printf("Message with token value %d delivery confirmed\n", dt);
        printf( "-----------------------------------------------\n" );
    #endif    
    deliveredtoken = dt;
}

// This function is called upon when an incoming message from mqtt is arrived
int msgarrvd(void *context, char *topicName, int topicLen, MQTTClient_message *message) {
    char *data_in = message->payload;

    printf( "Msg in : <%s>\n", data_in );

    logMsg(data_in);

    int payloadlen = strlen(data_in);
    char DateTime[50];
    char TotalDayUsage[50]; 
    char TotalNightUsage[50]; 
    char TotalDayWinst[50]; 
    char TotalNightWinst[50];
    char TotalGasUsage[50];
    splitMessage(data_in, payloadlen, DateTime, TotalDayUsage, TotalNightUsage, TotalDayWinst, TotalNightWinst, TotalGasUsage);
    // Create a new client to publish the message
    MQTTClient client = (MQTTClient)context;
    MQTTClient_message pubmsg = MQTTClient_message_initializer;
    MQTTClient_deliveryToken token;

    MQTTClient_freeMessage(&message);
    MQTTClient_free(topicName);
    
    
    return 1;
}

//connection lost
void connlost(void *context, char *cause) {
    printf("\nConnection lost\n");
    printf("     cause: %s\n", cause);
}

void logMsg(const char *payload) {
    // Open the logfile
    FILE*Logfile = fopen("OUTPUT.txt", "a");
    fprintf(Logfile, "%s\n", payload);
}

void splitMessage(const char *payload, int payloadlen, char *DateTime, char *TotalDayUsage, char *TotalNightUsage, char *TotalDayWinst, char *TotalNightWinst, char *TotalGasUsage)
{   
    int DateTimeIndex = 0;
    int currentArray = 0;
    int TotalDayUsageIndex = 0;
    int TotalNightUsageIndex = 0;
    int TotalDayWinstIndex = 0;
    int TotalNightWinstIndex = 0;
    int TotalGasUsageIndex = 0;
    int firstdata = 1;

    for (int i = 0; i < payloadlen; i++)
    {
        if (payload[i] == ';')
        {
            currentArray++;
        }
        else
        {
            switch (currentArray)
            {
            case 0:
                DateTime[DateTimeIndex++] = payload[i];
                break;
            case 5:
                TotalDayUsage[TotalDayUsageIndex++] = payload[i];
                break;
            case 6:
                TotalNightUsage[TotalNightUsageIndex++] = payload[i];
                break;
            case 7:
                TotalDayWinst[TotalDayWinstIndex++] = payload[i];
                break;
            case 8:
                TotalNightWinst[TotalNightWinstIndex++] = payload[i];
                break;
            case 10:
                TotalGasUsage[TotalGasUsageIndex++] = payload[i];
                break;
            }
        }

        if (currentArray < 10 )
        {
            currentArray = 0;
            if (firstdata == 1){
            PrintFirstRecords(DateTime, TotalDayUsage, TotalNightUsage, TotalDayWinst, TotalNightWinst, TotalGasUsage);
            firstdata = 0;
            }
            else 
            {
                PrintRecords(DateTime, TotalDayUsage, TotalNightUsage, TotalDayWinst, TotalNightWinst, TotalGasUsage);
            }
        }
    
    }
}
int somTotalStartUsage(char *TotalDayUsage, char *TotalNightUsage){
    int somTotalStartUsage = 0;
    int totalDayUsage = atoi(TotalDayUsage);
    int totalNightUsage = atoi(TotalNightUsage);
    somTotalStartUsage = totalDayUsage + totalNightUsage;
    return somTotalStartUsage;
}
int somTotalStartWinst(char *TotalDayWinst, char* TotalNightWinst){
    int somTotalStartWinst = 0;
    int totalDayWinst = atoi(TotalDayWinst);
    int totalNightWinst = atoi(TotalNightWinst);
    somTotalStartWinst = totalDayWinst + totalNightWinst;
    return somTotalStartWinst;

}
int somTotalUsage(char *TotalDayUsage, char *TotalNightUsage){
    int somTotalUsage = 0;
    int totalDayUsage = atoi(TotalDayUsage);
    int totalNightUsage = atoi(TotalNightUsage);
    somTotalUsage = totalDayUsage + totalNightUsage;
    return somTotalUsage;
}
int somTotalWinst(char *TotalDayWinst, char *TotalNightWinst){
    int somTotalWinst = 0;
    int totalDayWinst = atoi(TotalDayWinst);
    int totalNightWinst = atoi(TotalNightWinst);
    somTotalWinst = totalDayWinst + totalNightWinst;
    return somTotalWinst;
}
int dateTime(char *DateTime){
    int dateTime = DateTime[1] + DateTime[2];
    
    int IdateTime = atoi(dateTime);
    return IdateTime;
} 

void PrintFirstRecords(char *DateTime, char *TotalDayUsage, char *TotalNightUsage, char *TotalDayWinst, char *TotalNightWinst, char *TotalGasUsage){
    somTotalStartUsage(TotalDayUsage, TotalNightUsage);
    somTotalStartWinst(TotalDayWinst, TotalNightWinst);
    printf("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n");
    printf("Elektriciteit- en gas verbruik - totalen per dag\n");
    printf("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\n");
    printf("STARTWAARDEN\n\n");
    printf("DATUM - TIJD: %s\n", DateTime);
    printf("DAG     Totaal verbruik     = %s\n  kWh", TotalDayUsage);
    printf("DAG     Totaal opbrengst    = %s\n  kWh", TotalDayWinst);
    printf("Nacht   Totaal verbruik     = %s\n  kWh", TotalNightUsage);
    printf("Nacht   Totaal opbrengst    = %s\n  kWh", TotalNightWinst);
    printf("GAS     Totaal verbruik     = %s\n  kWh", TotalGasUsage);
    printf("------------------------------------------------------------------------------\n");
    printf("TOTALEN:");
    printf("------------------------------------------------------------------------------\n\n");
}

void PrintRecords(char *DateTime, char *TotalDayUsage, char *TotalNightUsage, char *TotalDayWinst, char *TotalNightWinst, char *TotalGasUsage){
    somTotalUsage(TotalDayUsage, TotalNightUsage);
    somTotalWinst(TotalDayWinst, TotalNightWinst);
    printf("DATUM - TIJD: %s\n", DateTime);
    printf("------------------------------------------------------------------------------\n");
    printf("STROOM");
    printf("        Totaal verbruik     = %s\n  kWh", TotalDayUsage);
    printf("        Totaal opbrengst    = %s\n  kWh", TotalDayWinst);
    printf("        Totaal verbruik     = %s\n  kWh", TotalNightUsage);
    printf("        Totaal opbrengst    = %s\n  kWh", TotalNightWinst);
    printf("        Totaal verbruik     = %s\n  kWh", TotalGasUsage);

    printf("------------------------------------------------------------------------------\n\n");
}
int main() {
   // Open MQTT client for listening
    
    MQTTClient client;
    MQTTClient_connectOptions conn_opts = MQTTClient_connectOptions_initializer;
    int rc;

    MQTTClient_create(&client, ADDRESS, CLIENTID, MQTTCLIENT_PERSISTENCE_NONE, NULL);
    conn_opts.keepAliveInterval = 20;
    conn_opts.cleansession = 1;

    MQTTClient_setCallbacks(client, client, connlost, msgarrvd, delivered);

    if ((rc = MQTTClient_connect(client, &conn_opts)) != MQTTCLIENT_SUCCESS) {
        printf("Failed to connect, return code %d\n", rc);
        exit(EXIT_FAILURE);
    }

    MQTTClient_subscribe(client, SUB_TOPIC, QOS);

    // Keep the program running to continue receiving and publishing messages
    for(;;) {
        usleep(50000);
    }

    MQTTClient_disconnect(client, 10000);
    MQTTClient_destroy(&client);
    return rc;



}